"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./hooks/use-audio.tsx":
/*!*****************************!*\
  !*** ./hooks/use-audio.tsx ***!
  \*****************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useAudio: () => (/* binding */ useAudio)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/.pnpm/next@15.2.4_@babel+core@7.2_b45306ac393cb74e69a281713883807c/node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* __next_internal_client_entry_do_not_use__ useAudio auto */ var _s = $RefreshSig$();\n\nfunction useAudio(src) {\n    let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n    _s();\n    const [audio, setAudio] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [isPlaying, setIsPlaying] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const [isReady, setIsReady] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false) // New state for readiness\n    ;\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)({\n        \"useAudio.useEffect\": ()=>{\n            // Only create audio element in browser environment\n            if (true) {\n                const audioElement = new Audio();\n                console.log(\"useAudio: Creating new Audio element for \".concat(src));\n                audioElement.preload = \"auto\"; // Hint to the browser to load the audio\n                // Set properties before setting src to avoid issues\n                if (options.volume !== undefined) {\n                    // Clamp volume between 0 and 1\n                    audioElement.volume = Math.max(0, Math.min(1, options.volume));\n                }\n                if (options.loop !== undefined) {\n                    audioElement.loop = options.loop;\n                }\n                // Event Handlers\n                const handleError = {\n                    \"useAudio.useEffect.handleError\": (e)=>{\n                        console.warn(\"useAudio: Audio error for \".concat(src), e);\n                        setIsReady(false); // Audio is not ready if an error occurs\n                    }\n                }[\"useAudio.useEffect.handleError\"];\n                const handleCanPlayThrough = {\n                    \"useAudio.useEffect.handleCanPlayThrough\": ()=>{\n                        console.log(\"useAudio: Audio for \".concat(src, \" can play through.\"));\n                        setIsReady(true);\n                    }\n                }[\"useAudio.useEffect.handleCanPlayThrough\"];\n                const handlePlaying = {\n                    \"useAudio.useEffect.handlePlaying\": ()=>{\n                        setIsPlaying(true);\n                    }\n                }[\"useAudio.useEffect.handlePlaying\"];\n                const handlePause = {\n                    \"useAudio.useEffect.handlePause\": ()=>{\n                        setIsPlaying(false);\n                    }\n                }[\"useAudio.useEffect.handlePause\"];\n                const handleEnded = {\n                    \"useAudio.useEffect.handleEnded\": ()=>{\n                        if (!audioElement.loop) {\n                            setIsPlaying(false);\n                        }\n                    }\n                }[\"useAudio.useEffect.handleEnded\"];\n                audioElement.addEventListener(\"error\", handleError);\n                audioElement.addEventListener(\"canplaythrough\", handleCanPlayThrough);\n                audioElement.addEventListener(\"playing\", handlePlaying);\n                audioElement.addEventListener(\"pause\", handlePause);\n                audioElement.addEventListener(\"ended\", handleEnded);\n                audioElement.src = src // Set source last\n                ;\n                setAudio(audioElement) // This will trigger re-render where hook is used\n                ;\n                return ({\n                    \"useAudio.useEffect\": ()=>{\n                        console.log(\"useAudio: Cleaning up Audio element for \".concat(src));\n                        audioElement.pause();\n                        audioElement.removeEventListener(\"error\", handleError);\n                        audioElement.removeEventListener(\"canplaythrough\", handleCanPlayThrough);\n                        audioElement.removeEventListener(\"playing\", handlePlaying);\n                        audioElement.removeEventListener(\"pause\", handlePause);\n                        audioElement.removeEventListener(\"ended\", handleEnded);\n                        audioElement.src = \"\" // Release the resource\n                        ;\n                        setAudio(null) // Clear the audio element from state\n                        ;\n                        setIsReady(false) // Reset readiness state\n                        ;\n                        setIsPlaying(false) // Reset playing state\n                        ;\n                    }\n                })[\"useAudio.useEffect\"];\n            }\n            return undefined // For server-side or if window is undefined\n            ;\n        }\n    }[\"useAudio.useEffect\"], [\n        src,\n        options.volume,\n        options.loop\n    ]) // options.autoplay handled in another effect\n    ;\n    // Autoplay effect - will attempt to play if options.autoplay is true AND audio is ready\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)({\n        \"useAudio.useEffect\": ()=>{\n            if (audio && isReady && options.autoplay && !isPlaying) {\n                console.log(\"useAudio: Autoplay triggered for \".concat(src));\n                audio.play().catch({\n                    \"useAudio.useEffect\": (error)=>{\n                        // This catch is for autoplay attempts within the hook\n                        console.warn(\"useAudio: Autoplay for \".concat(src, \" failed. Browser policy likely prevented it.\"), error);\n                    }\n                }[\"useAudio.useEffect\"]);\n            }\n        }\n    }[\"useAudio.useEffect\"], [\n        audio,\n        isReady,\n        options.autoplay,\n        isPlaying\n    ]); // Removed play from here, direct audio.play()\n    const play = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"useAudio.useCallback[play]\": async ()=>{\n            if (audio && audio.paused) {\n                console.log(\"useAudio: play() called by component\");\n                try {\n                    await audio.play();\n                // isPlaying state will be updated by the 'playing' event listener\n                } catch (error) {\n                    console.warn(\"useAudio: Error in play() caught:\", error);\n                    // isPlaying state should be handled by 'pause' or 'error' listeners if play fails\n                    throw error; // Re-throw so the calling component can also catch it\n                }\n            } else if (audio && !audio.paused) {\n                console.log(\"useAudio: play() called, but audio already playing.\");\n                return Promise.resolve(); // Indicate success as it's already playing\n            } else {\n                console.warn(\"useAudio: play() called, but audio element is not available or ready.\");\n                return Promise.reject(new Error(\"Audio element not available or not ready.\"));\n            }\n        }\n    }[\"useAudio.useCallback[play]\"], [\n        audio\n    ]);\n    const pause = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"useAudio.useCallback[pause]\": ()=>{\n            if (audio) {\n                audio.pause();\n            // isPlaying state will be updated by the 'pause' event listener\n            }\n        }\n    }[\"useAudio.useCallback[pause]\"], [\n        audio\n    ]);\n    const stop = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"useAudio.useCallback[stop]\": ()=>{\n            if (audio) {\n                audio.pause();\n                audio.currentTime = 0; // Reset time\n            // isPlaying state will be updated by the 'pause' event listener\n            }\n        }\n    }[\"useAudio.useCallback[stop]\"], [\n        audio\n    ]);\n    const toggle = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"useAudio.useCallback[toggle]\": async ()=>{\n            if (isPlaying) {\n                pause();\n            } else {\n                // play() already returns a promise and handles errors.\n                // The catch here is mostly for completeness if play() itself threw an unhandled error\n                // before reaching audio.play() (e.g., audio not available).\n                try {\n                    await play();\n                } catch (error) {\n                    console.warn(\"useAudio: Error in toggle (during play attempt):\", error);\n                }\n            }\n        }\n    }[\"useAudio.useCallback[toggle]\"], [\n        isPlaying,\n        pause,\n        play\n    ]);\n    // Return the audio element itself, and the new isReady state\n    return {\n        audio,\n        play,\n        pause,\n        stop,\n        toggle,\n        isPlaying,\n        isReady\n    };\n}\n_s(useAudio, \"bNDjRCCyOhHHOCH3n2etczx3kGc=\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./hooks/use-audio.tsx\n"));

/***/ })

});